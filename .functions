dir() {
  mkdir -p $1
  cd $1
}

edit() {
  code ${1:-.} # Default to .
}

tree() {
  command tree -I 'node_modules' -I 'target' "$@"
}

# ================================
# Source: trozler/whereAmI
# https://github.com/trozler/whereAmI/blob/master/findmepls.sh
#
# Forked to use `jq` instead of `grep` & `awk`
# ================================
whereami() { 
  RESP=$(curl -s "ipinfo.io")
	CITY=$(echo "$RESP" | jq -r '.city')
	COUNTRY=$(echo "$RESP" | jq -r '.country')
	IP=$(echo "$RESP" | jq -r '.ip')
	REGION=$(echo "$RESP" | jq -r '.region')
	printf "%s - %s, %s, %s.\n" "$IP" "$CITY" "$REGION" "$COUNTRY"
} || echo "lost - somewhere off the shoulder of Orion.";

# ================================
# Source: mathiasbynens/dotfiles
# https://github.com/mathiasbynens/dotfiles/blob/main/.functions
# ================================

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|target|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function aliases () {
	alias | grep "$1"
}

latency() {
	# Check if URL is provided
	if [[ -z "$1" ]]; then
		echo "Error: URL is required"
		echo "Usage: latency <url> [number_of_requests]"
		return 1
	fi
  
	local url="$1"
	local times=${2:-10}

	# Add http:// prefix if the URL doesn't start with http:// or https://
	if [[ ! "$url" =~ ^https?:// ]]; then
		url="https://$url"
	fi

	# Collect all measurements
	local results=()
	for i in $(seq 1 $times); do
		local result=$(curl -o /dev/null -s -w '%{time_total}' "$url" | awk '{printf "%.0f", $1 * 1000}')
		results+=($result)
		echo "Request $i: $result ms"
	done

	# Calculate statistics
	local sum=0
	local min=${results[0]}
	local max=${results[0]}

	# Make sure min is initialized properly
	if [[ -z "$min" ]]; then
		min=${results[1]}
	fi

	for val in "${results[@]}"; do
	# Skip empty values
	if [[ -n "$val" ]]; then
		sum=$((sum + val))
		if (( val < min )) || [[ -z "$min" ]]; then min=$val; fi
		if (( val > max )); then max=$val; fi
	fi
	done

	local avg=$((sum / times))

	echo "------------------------"
	echo "Min: $min ms"
	echo "Max: $max ms"
	echo "Avg: $avg ms"
}
